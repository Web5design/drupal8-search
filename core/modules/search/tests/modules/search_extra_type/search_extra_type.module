<?php

/**
 * @file
 * Dummy module implementing a search type for search module testing.
 */

/**
 * Implements hook_search_page().
 *
 * Adds some text to the search page so we can verify that it runs.
 */
function search_extra_type_search_page($results) {
  $output['prefix']['#markup'] = '<h2>Test page text is here</h2> <ol class="search-results">';

  foreach ($results as $entry) {
    $output[] = array(
      '#theme' => 'search_result',
      '#result' => $entry,
      '#module' => 'search_extra_type',
    );
  }
  $output['suffix']['#markup'] = '</ol>' . theme('pager');

  return $output;
}

/**
 * Implements hook_search_admin().
 */
function search_extra_type_search_admin() {
  // Output form for defining rank factor weights.
  $form['extra_type_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Extra type settings'),
    '#tree' => TRUE,
  );

  $form['extra_type_settings']['boost'] = array(
    '#type' => 'select',
    '#title' => t('Boost method'),
    '#options' => array(
      'bi' => t('Bistromathic'),
      'ii' => t('Infinite Improbability'),
    ),
    '#default_value' => config('search_extra_type.settings')->get('boost'),
  );

  $form['#submit'][] = 'search_extra_type_admin_submit';

  return $form;
}

/**
 * Form API callback: Save admin settings
 */
function search_extra_type_admin_submit($form, &$form_state) {
  config('search_extra_type.settings')
    ->set('boost', $form_state['values']['extra_type_settings']['boost'])
    ->save();
}
